<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
             http://www.springframework.org/schema/security
             http://www.springframework.org/schema/security/spring-security-4.2.xsd">

    <http>
        <intercept-url pattern="/" access="permitAll()"/>
        <intercept-url pattern="/registration" access="permitAll()" />
        <intercept-url pattern="/api/registration" access="permitAll()"/>
        <intercept-url pattern="/user/**" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/project/**" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/risk/**" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/api/**" access="hasRole('ROLE_USER')"/>
        <intercept-url pattern="/home" access="hasRole('ROLE_USER')"/>
        <form-login login-page='/login'
                    default-target-url="/home"/>
        <logout logout-success-url="/?logout" />
        <csrf/>
    </http>

    <authentication-manager>
        <authentication-provider>
            <jdbc-user-service data-source-ref="dataSource"
                    users-by-username-query="SELECT username, password, '1' AS enabled FROM users WHERE username=?"
                    authorities-by-username-query="SELECT users.username, roles.role FROM users
                        INNER JOIN roles ON roles.user = users.user_id WHERE username = ?"/>
            <password-encoder ref="bCryptEncoder"/>
        </authentication-provider>
    </authentication-manager>

    <beans:bean id="bCryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

</beans:beans>